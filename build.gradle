buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'se.transmode.gradle:gradle-docker:1.2'
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")


	}
}

plugins {
    id "groovy"
	id "org.owasp.dependencycheck" version "3.0.1"
}

apply plugin: 'org.springframework.boot'
apply plugin: "findbugs"

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
group = 'wss'

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-groovy-templates')
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.codehaus.groovy:groovy-all:2.4.12')

    // CVE
	compile 'commons-collections:commons-collections:3.2'

    runtime('com.h2database:h2')

    // FP
    runtime 'mysql:mysql-connector-java:8.0.8-dmr'

    testCompile('org.springframework.boot:spring-boot-starter-test')

    findbugs 'com.google.code.findbugs:findbugs:3.0.1'
    findbugs configurations.findbugsPlugins.dependencies
    findbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.4.4'
}

dependencyCheck {
    suppressionFile = "falsePositives.xml"
}


task findSecurityBugs(type: FindBugs) {
    classes = fileTree(project.rootDir.absolutePath).include("**/*.class");
    source = fileTree(project.rootDir.absolutePath).include("**/*.java");
    classpath = files()
    pluginClasspath = project.configurations.findbugsPlugins

    findbugs {
        toolVersion = "3.0.1"
        sourceSets = [sourceSets.main] // [sourceSets.main] for Java project
        ignoreFailures = true
        reportsDir = file("$project.buildDir/findbugsReports")
        effort = "max"
        reportLevel = "low"
        includeFilter = file("$rootProject.projectDir/fsb-include.xml")
        excludeFilter = file("$rootProject.projectDir/fsb-exclude.xml")
    }

    reports {
        xml.enabled = false
        html.enabled = true
    }
}